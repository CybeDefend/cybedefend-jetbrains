package com.cybedefend.toolwindow.panel

import DetailedVulnerability
import java.awt.*
import javax.swing.Icon
import javax.swing.table.AbstractTableModel

/**
 * TableModel with three columns:
 *  0: Severity (custom-drawn icon: letter in colored circle)
 *  1: Vulnerability ID / Name
 *  2: File path
 */
class VulnerabilityTableModel : AbstractTableModel() {

    private val columns = arrayOf("Severity", "ID / Name", "File")
    private val rows = mutableListOf<Row>()

    /** Populate rows from API data */
    fun setData(vulns: List<DetailedVulnerability>?) {
        rows.clear()
        vulns?.forEach { v ->
            val sev = v.currentSeverity.uppercase()
            val letter = when (sev) {
                "CRITICAL" -> "C"
                "HIGH"     -> "H"
                "MEDIUM"   -> "M"
                "LOW"      -> "L"
                else       -> "?"
            }
            val color = when (sev) {
                "CRITICAL" -> Color(0x8B0000)   // dark red
                "HIGH"     -> Color(0xDD6B20)   // orange
                "MEDIUM"   -> Color(0x3182CE)   // blue
                "LOW"      -> Color(0x4A5568)   // gray
                else       -> Color(0x718096)   // default gray-blue
            }
            rows += Row(
                icon      = LetterCircleIcon(letter, color, 16),
                nameOrId  = v.vulnerability.name.ifBlank { v.id },
                file      = v.path,
                severity  = sev,
                id        = v.id
            )
        }
        fireTableDataChanged()
    }

    override fun getRowCount(): Int = rows.size
    override fun getColumnCount(): Int = columns.size
    override fun getColumnName(col: Int): String = columns[col]
    fun getIdAt(rowIndex: Int): String = rows[rowIndex].id

    override fun getColumnClass(col: Int): Class<*> = when (col) {
        0 -> Icon::class.java
        else -> String::class.java
    }

    override fun getValueAt(row: Int, col: Int): Any = when (col) {
        0 -> rows[row].icon
        1 -> rows[row].nameOrId
        2 -> rows[row].file
        else -> ""
    }

    /** Expose the raw severity string for external filtering */
    fun getSeverityAt(rowIndex: Int): String = rows[rowIndex].severity

    /** Data holder for each row */
    private data class Row(
        val icon: Icon,
        val nameOrId: String,
        val file: String,
        val severity: String,
        val id: String
    )
}

/**
 * Custom Icon that draws a letter centered in a colored circle.
 *
 * @param letter the single-character text to draw
 * @param circleColor background circle color
 * @param size the diameter in pixels
 */
class LetterCircleIcon(
    private val letter: String,
    private val circleColor: Color,
    private val size: Int
) : Icon {
    private val font = Font("Dialog", Font.BOLD, (size * 0.75).toInt())

    override fun getIconWidth() = size
    override fun getIconHeight() = size

    override fun paintIcon(c: Component?, g: Graphics, x: Int, y: Int) {
        val g2 = g.create() as Graphics2D
        try {
            g2.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON
            )

            // draw circle
            g2.color = circleColor
            g2.fillOval(x, y, size, size)

            // draw letter
            g2.font = font
            g2.color = Color.WHITE
            val fm = g2.fontMetrics
            val textWidth = fm.stringWidth(letter)
            val textHeight = fm.ascent
            val tx = x + (size - textWidth) / 2
            val ty = y + (size + textHeight) / 2 - 1
            g2.drawString(letter, tx, ty)
        } finally {
            g2.dispose()
        }
    }
}
