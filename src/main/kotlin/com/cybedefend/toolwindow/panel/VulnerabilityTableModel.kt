// Fichier : src/main/kotlin/com/cybedefend/toolwindow/panel/VulnerabilityTableModel.kt
package com.cybedefend.toolwindow.panel

import DetailedVulnerability
import java.awt.*
import javax.swing.Icon
import javax.swing.table.AbstractTableModel

class VulnerabilityTableModel : AbstractTableModel() {

    private val columns = arrayOf("Severity", "ID / Name", "File")
    private val rows = mutableListOf<Row>()

    fun setData(vulns: List<DetailedVulnerability>?) {
        rows.clear()
        vulns?.forEach { v ->
            val sev = v.currentSeverity.uppercase()
            val severityInfo = severityMap[sev] ?: severityMap["UNKNOWN"]!!

            rows += Row(
                icon = LetterCircleIcon(severityInfo.letter, severityInfo.color, 16),
                nameOrId = v.vulnerability.name.ifBlank { v.id },
                file = v.path,
                severity = sev,
                id = v.id
            )
        }
        fireTableDataChanged()
    }

    override fun getRowCount(): Int = rows.size
    override fun getColumnCount(): Int = columns.size
    override fun getColumnName(col: Int): String = columns[col]
    fun getIdAt(rowIndex: Int): String = rows[rowIndex].id

    override fun getColumnClass(col: Int): Class<*> = when (col) {
        0 -> Icon::class.java
        else -> String::class.java
    }

    override fun getValueAt(row: Int, col: Int): Any = when (col) {
        0 -> rows[row].icon
        1 -> rows[row].nameOrId
        2 -> rows[row].file
        else -> ""
    }

    fun getSeverityAt(rowIndex: Int): String = rows[rowIndex].severity

    private data class Row(
        val icon: Icon,
        val nameOrId: String,
        val file: String,
        val severity: String,
        val id: String
    )
}

class LetterCircleIcon(
    private val letter: String,
    private val circleColor: Color,
    private val size: Int
) : Icon {
    private val font = Font("SansSerif", Font.BOLD, (size * 0.7).toInt())

    override fun getIconWidth() = size
    override fun getIconHeight() = size

    override fun paintIcon(c: Component?, g: Graphics, x: Int, y: Int) {
        val g2 = g.create() as Graphics2D
        try {
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)
            g2.color = circleColor
            g2.fillOval(x, y, size, size)
            g2.font = font
            g2.color = Color.WHITE

            val fm = g2.fontMetrics
            val textWidth = fm.stringWidth(letter)
            val textHeight = fm.height
            val textX = x + (size - textWidth) / 2
            val textY = y + (size - textHeight) / 2 + fm.ascent
            g2.drawString(letter, textX, textY)
        } finally {
            g2.dispose()
        }
    }
}