// Fichier : src/main/kotlin/com/cybedefend/toolwindow/panel/VulnerabilitySastIacDetailsPanel.kt
package com.cybedefend.toolwindow.panel

import DetailedVulnerability
import GetProjectVulnerabilityByIdResponse
import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.editor.markup.*
import com.intellij.openapi.fileEditor.FileEditorManager
import com.intellij.openapi.fileEditor.OpenFileDescriptor
import com.intellij.openapi.project.Project
import com.intellij.openapi.vfs.LocalFileSystem
import com.intellij.ui.HyperlinkLabel
import com.intellij.ui.JBColor
import com.intellij.ui.TitledSeparator
import com.intellij.ui.components.JBLabel
import com.intellij.ui.components.JBScrollPane
import com.intellij.util.ui.FormBuilder
import com.intellij.util.ui.JBUI
import toUnified
import java.awt.BorderLayout
import java.awt.Font
import javax.swing.JPanel
import javax.swing.event.HyperlinkEvent

class VulnerabilitySastIacDetailsPanel(private val project: Project) : JPanel(BorderLayout()) {

    init {
        border = JBUI.Borders.empty(16)
    }

    fun showDetails(dto: GetProjectVulnerabilityByIdResponse) {
        this.removeAll()
        val baseVulnerability = when {
            dto.sast != null -> dto.sast.toUnified()
            dto.iac != null -> dto.iac.toUnified()
            else -> {
                this.add(JBLabel("Invalid vulnerability data provided.", JBLabel.CENTER))
                return
            }
        }
        val fb = FormBuilder.createFormBuilder()
        val severityInfo = severityMap[baseVulnerability.currentSeverity.uppercase()] ?: severityMap["UNKNOWN"]!!
        val titlePanel = JPanel(BorderLayout(JBUI.scale(8), 0)).apply {
            add(JBLabel(LetterCircleIcon(severityInfo.letter, severityInfo.color, 20)), BorderLayout.WEST)
            add(JBLabel(baseVulnerability.vulnerability.name).apply {
                font = font.deriveFont(Font.BOLD, 20f)
            }, BorderLayout.CENTER)
        }
        val linkPanel = JPanel(BorderLayout()).apply {
            border = JBUI.Borders.emptyLeft(28)
            val link = HyperlinkLabel(baseVulnerability.path)
            link.addHyperlinkListener { if (it.eventType == HyperlinkEvent.EventType.ACTIVATED) openFileAt(baseVulnerability) }
            add(link, BorderLayout.WEST)
        }
        fb.addComponent(titlePanel)
        fb.addComponent(linkPanel)
        fb.addVerticalGap(12)
        fb.addComponent(TitledSeparator("Description"))
        fb.addComponent(createMarkdownPane(baseVulnerability.vulnerability.description))
        baseVulnerability.vulnerability.howToPrevent.takeIf { it.isNotBlank() }?.let {
            fb.addComponent(TitledSeparator("How to Prevent"))
            fb.addComponent(createMarkdownPane(it))
        }
        fb.addComponent(TitledSeparator("Details"))
        val detailsPanel = FormBuilder.createFormBuilder()
            .addLabeledComponent("State:", JBLabel(baseVulnerability.currentState))
            .addLabeledComponent("Priority:", JBLabel(baseVulnerability.currentPriority))
            .panel
        fb.addComponent(detailsPanel)
        dto.sast?.dataFlowItems?.takeIf { it.isNotEmpty() }?.let { flows ->
            fb.addComponent(TitledSeparator("Data Flow"))
            val markdownContent = flows.joinToString("\n\n") { flow ->
                "**Step ${flows.indexOf(flow) + 1}: ${flow.type} in `${flow.nameHighlight}`**\n\n" +
                        "```\n" +
                        flow.code.joinToString("\n") { it.content.trim() } +
                        "\n```"
            }
            fb.addComponent(createMarkdownPane(markdownContent))
        }
        baseVulnerability.historyItems.takeIf { it.isNotEmpty() }?.let { hist ->
            fb.addComponent(TitledSeparator("History"))
            val markdownContent = hist.joinToString("\n") { "â€¢ **${it.date}** by ${it.user?.email ?: "System"}: *${it.value}*" }
            fb.addComponent(createMarkdownPane(markdownContent))
        }

        val formPanel = fb.panel.apply {
            isOpaque = false
        }
        val scrollableWrapper = ScrollablePanel(BorderLayout()).apply {
            add(formPanel, BorderLayout.CENTER)
        }
        this.add(JBScrollPane(scrollableWrapper), BorderLayout.CENTER)
        this.revalidate()
        this.repaint()
    }

    private fun openFileAt(vulnerability: DetailedVulnerability) {
        ApplicationManager.getApplication().executeOnPooledThread {
            val vfile = project.baseDir?.findFileByRelativePath(vulnerability.path) ?: LocalFileSystem.getInstance()
                .refreshAndFindFileByPath("${project.basePath}/${vulnerability.path}")
            vfile?.let { file ->
                val line = vulnerability.vulnerableStartLine - 1
                if (line < 0) return@let
                val desc = OpenFileDescriptor(project, file, line, 0)
                ApplicationManager.getApplication().invokeLater {
                    FileEditorManager.getInstance(project)
                        .openTextEditor(desc, true)
                        ?.markupModel
                        ?.addLineHighlighter(
                            line,
                            HighlighterLayer.ERROR,
                            TextAttributes(null, null, JBColor.RED, EffectType.LINE_UNDERSCORE, Font.PLAIN)
                        )
                }
            }
        }
    }
}