// Fichier : src/main/kotlin/com/cybedefend/toolwindow/panel/VulnerabilityScaDetailsPanel.kt
package com.cybedefend.toolwindow.panel

import VulnerabilitySca
import com.intellij.ide.BrowserUtil
import com.intellij.ui.HyperlinkLabel
import com.intellij.ui.JBColor
import com.intellij.ui.TitledSeparator
import com.intellij.ui.components.JBLabel
import com.intellij.ui.components.JBScrollPane
import com.intellij.util.ui.FormBuilder
import com.intellij.util.ui.JBUI
import java.awt.BorderLayout
import java.awt.Font
import javax.swing.JPanel

class VulnerabilityScaDetailsPanel : JPanel(BorderLayout()) {
    init {
        border = JBUI.Borders.empty(16)
    }

    fun showDetails(sca: VulnerabilitySca) {
        this.removeAll()
        val base = sca.base!!
        val metadata = sca.metadata!!
        val library = sca.library!!
        val fb = FormBuilder.createFormBuilder()
        val severityInfo = severityMap[base.currentSeverity.uppercase()] ?: severityMap["UNKNOWN"]!!
        val titlePanel =
                JPanel(BorderLayout(JBUI.scale(8), 0)).apply {
                    add(
                            JBLabel(LetterCircleIcon(severityInfo.letter, severityInfo.color, 20)),
                            BorderLayout.WEST
                    )
                    add(
                            JBLabel(metadata.summary).apply {
                                font = font.deriveFont(Font.BOLD, 22f)
                            },
                            BorderLayout.CENTER
                    )
                }
        fb.addComponent(titlePanel)
        fb.addVerticalGap(8)
        fb.addComponent(TitledSeparator("Package Information"))
        fb.addLabeledComponent("Package:", JBLabel(library.packageName))
        fb.addLabeledComponent("Version:", JBLabel(library.packageVersion))
        fb.addLabeledComponent("Ecosystem:", JBLabel(library.ecosystem))
        fb.addLabeledComponent("File:", JBLabel(library.fileName))

        // Add fix information from metadata packages
        metadata.packages.firstOrNull()?.let { packageInfo ->
            fb.addVerticalGap(8)
            fb.addComponent(TitledSeparator("Fix Information"))

            if (packageInfo.fixAvailable) {
                if (packageInfo.fixed.isNotBlank()) {
                    fb.addLabeledComponent(
                            "Fixed in version:",
                            JBLabel(packageInfo.fixed).apply {
                                foreground = JBColor.GREEN
                                font = font.deriveFont(Font.BOLD)
                            }
                    )
                } else {
                    fb.addLabeledComponent(
                            "Fix status:",
                            JBLabel("Fix available (version not specified)").apply {
                                foreground = JBColor.GREEN
                            }
                    )
                }
            } else {
                fb.addLabeledComponent(
                        "Fix status:",
                        JBLabel("No fix available yet").apply { foreground = JBColor.ORANGE }
                )
            }

            if (packageInfo.introduced.isNotBlank()) {
                fb.addLabeledComponent("Introduced in:", JBLabel(packageInfo.introduced))
            }
        }

        fb.addVerticalGap(12)
        fb.addComponent(TitledSeparator("Vulnerability Details"))
        fb.addComponent(
                createMarkdownPane(
                        sanitizeMarkdownContent(metadata.details ?: "No details available.")
                )
        )
        fb.addVerticalGap(12)
        metadata.references.takeIf { it.isNotEmpty() }?.let {
            fb.addComponent(TitledSeparator("References"))
            it.forEach { ref ->
                val hyperlinkLabel = HyperlinkLabel("â€¢ ${ref.url}")
                hyperlinkLabel.addHyperlinkListener { BrowserUtil.browse(ref.url) }
                fb.addComponent(hyperlinkLabel)
            }
        }

        val formPanel = fb.panel.apply { isOpaque = false }
        val scrollableWrapper =
                ScrollablePanel(BorderLayout()).apply { add(formPanel, BorderLayout.CENTER) }
        this.add(JBScrollPane(scrollableWrapper), BorderLayout.CENTER)
        this.revalidate()
        this.repaint()
    }

    /**
     * Sanitizes markdown content to prevent CSS parsing errors. Handles special characters and
     * ensures content is safe for HTML rendering.
     */
    private fun sanitizeMarkdownContent(content: String?): String {
        if (content.isNullOrBlank()) return ""

        return content.replace("\u0000", "") // Remove null characters
                .replace(
                        Regex("[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]"),
                        ""
                ) // Remove control characters
                .replace(
                        Regex("\\\\[^\\w\\s]"),
                        ""
                ) // Remove potentially problematic escape sequences
                .trim()
                .let {
                    if (it.length > 10000) it.take(10000) + "..." else it
                } // Limit content length
    }
}
